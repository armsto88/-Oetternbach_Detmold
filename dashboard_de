library(shiny)
library(leaflet)
library(ggplot2)
library(dplyr)
library(lubridate)
library(DT)
library(shinydashboard)
library(ggthemes)
library(tidyr)
library(DT)
library(seewave)
library(tuneR)
library(shinyjs)
library(shinyWidgets)
library(shinythemes)




# Load the data
data <- read.csv("Master_V2_27.11.csv",row.names = 1)
#SITE_data<- read.csv("Site_data.csv")
#result <- read.csv("Species_of_concern_12.11.24.csv")
species_list <- read.csv("species_list_v3.csv",row.names = 1)
coverage <- read.csv("coverage.csv")


data <- data %>%
  mutate(corr_datetime = ymd_hms(corr_datetime),
         my = ymd(my),
         Call_time = hms(Call_time),
         hour = hour(Call_time))

Artenliste<-data%>%
  select(Artname,Scientific.name)%>%
  rename(Wissenschaftlicher.Name = Scientific.name)%>%
  group_by(Artname,Wissenschaftlicher.Name)%>%
  summarise(Erfassung = n())



ui <- navbarPage(
  title = div(
    tags$a(
      href = "http://www.oetternbach.de/",  # Replace with the desired URL
      target = "_blank",              # Opens the link in a new tab
      tags$img(
        src = "Oetternbach-Logo-Magenta-300x298.png", 
        height = "65px", 
        style = "margin-right: 50px; margin-top: -20px; margin-left: 1px;"
      )
    ),
    "Oetternbach, Detmold - Bioakustik-Daten"
  ),
  theme = shinytheme("simplex"),
  tags$style(HTML("
        .navbar {
            padding: 30px;
             text-align: center;
        }
    ")),
  
  
  
  # Page 1: Overview
  tabPanel("Übersicht",
           fluidPage(
             tags$head(
               tags$style(HTML("
                 .value-box-container {
                    text-align: center;
                     margin-left: -20px;
                     justify-content: center;
                }
    .custom-box {
      background-color: #ffffff; /* White background for better contrast */
      border: 1px solid #3288bd; /* Blue border for a more vibrant look */
      border-radius: 7px; /* Slightly larger rounded corners */
      padding: 10px; /* Increased padding for a more spacious feel */
      box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2); /* More prominent shadow for depth */
      margin-bottom: 10px; /* Space between boxes */
    }
    .custom-box h4 {
      color: #3288bd; /* Blue color for the heading */
      margin-bottom: 13px; /* Space below the heading */
      font-weight: bold; /* Bold heading for emphasis */
    }
    .custom-box p {
      color: #333; /* Dark grey for the text for better readability */
      line-height: 1.4; /* Increased line height for improved readability */
    }
 .value-box-container.icon {
    font-size: 50px; /* Reasonable icon size */
    display: flex; /* Use flexbox for alignment */
    flex-direction: column; /* Align items in a column */
    align-items: center; /* Center align items horizontally */
    justify-content: center; /* Center align items vertically */
    margin: 0 auto; /* Center the value box */
    color: #3288bd; /* Change icon color for better contrast */
}

.value-box {
    text-align: center; /* Center align text below the icon */
    padding: 10px; /* Add padding around the value box */
}

#map {
border: 2px solid #cccccc;  /* Light gray border */
box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.2);  /* Subtle shadow */
  border-radius: 10px;  /* Rounded corners */
  }

  "))
             ),
             titlePanel("Übersicht"),
             
             HTML("<div style='height:10px;'></div>"),
             fluidRow(
               column(
                 width = 2,
                 class = "value-box-container",
                 valueBoxOutput("totalRecords", width = NULL)
               ),
               column(
                 width = 2,
                 class = "value-box-container",
                 valueBoxOutput("uniqueSpecies", width = NULL)
               ),
               column(
                 width = 3,
                 class = "value-box-container",
                 valueBoxOutput("Speciesofconcern", width = NULL)
               )
             ),
             HTML("<div style='height:40px;'></div>"),
             
             box(
               width = 6, 
               status = "primary", 
               solidHeader = TRUE,
               class = "custom-box",
               HTML(paste0(
                 '<div style="padding: 15px;">',
                 '<h3 style="color: #3288bd; text-align: left;">Inhalt</h3>',
                 '<p style="color: #333; line-height: 1.6; text-align: left;">',
                 'Die vorliegende Analyse untersucht Audiodaten, die von März 2021 bis September 2022 an fünf Standorten im Gebiet Oetternbach aufgenommen wurden. ',
                 'Die Aufnahmen wurden alle 10 Minuten in Intervallen von einer Minute durchgeführt und mit dem BirdNet Analyzer ausgewertet. ',
                 'Die Daten wurden verifiziert und artspezifische Vertrauensniveaus ermittelt, um die Bestimmungsgenauigkeit zu erhöhen. ',
                 'Von den 77 nachgewiesenen Vogelarten sind zehn Arten in Deutschland von besonderem naturschutzfachlichem Interesse, da sie aufgrund anthropogener Einflüsse auf ihre Lebensräume, ',
                 'wie z.B. Bebauung und störende landwirtschaftliche Praktiken, rückläufige Bestandstrends aufweisen. ',
                 'Das Gebiet um Oetternbach stellt einen wichtigen und wertvollen Lebensraum für bereits gefährdete Vogelarten dar.',
                 '</p>',
                 '</div>'
               ))
             ),
             # Leaflet Map
             column(
               width = 6,
               leafletOutput("map", height = "400px")
             ),
             
             HTML("<div style='height:70px;'></div>"),
             
             
             HTML("<div style='height:60px;'></div>"),
             
             # New row for plots
             fluidRow(
               # First plot
               column(
                 width = 6,
                 HTML("<div style='height:60px;'></div>"),
                 
                 titlePanel("Artenerfassung über Zeit"),
                 HTML("<div style='height:50px;'></div>"),
                 
                 # In your UI code, add the following selectInput:
                 selectInput("grouping", "Gruppierung:", choices = c("Monatlich" = "month", "Stündlich" = "hour"),selected = "month"),
                 
                 plotOutput("plot1", height = "500px")  # Adjust height as needed
               ),
               # Second plot
               column(
                 width = 6,
                 HTML("<div style='height:60px;'></div>"),
                 
                 titlePanel("Aufnahmedauer pro Monat"),
                 HTML("<div style='height:50px;'></div>"),
                 selectInput(
                   inputId = "group_by",
                   label = "Gruppierung:",
                   choices = list("Monat/Jahr" = "month_year", "Standort" = "site_month_year"),
                   selected = "month_year"
                 ),
                 
                 plotOutput("plot2", height = "500px"),
                 HTML("<div style='height:50px;'></div>")
                 # Adjust height as neede
               )
             )
           )
  ),
  
  # Page 2: Species of Concern
  tabPanel("Besonders schützenswerte Arten",
           fluidPage(
             tags$head(
               tags$style(HTML("
        /* Adjust table styling */
        .dataTable {
          font-size: 12px;
          margin: 0;
          padding: 5px;
        }
        .dataTable th, .dataTable td {
          padding: 4px;  /* Slightly increased for readability */
        }

        /* Styling for iframe box */
        .iframe-box {
          background-color: #f9f9f9;  /* Light background */
          border: 1px solid #ccc;  /* Border around iframe */
          padding: 10px;
          border-radius: 8px;  /* Rounded corners */
          box-shadow: 0 2px 5px rgba(0,0,0,0.1);  /* Light shadow */
          height: 500px;  /* Fixed height */
        }
        
        /* Adjust row and column spacing */
        .shiny-column {
          margin-top: 10px;
        }
      "))
             ),
             
             titlePanel("Besonders schützenswerte Arten"),
             
             # Adjust spacing between title and content
             HTML("<div style='height:70px;'></div>"),
             
             fluidRow(
               # Left Column for the Table
               column(
                 width = 5,  # Adjusted width
                 DTOutput("birdTable", width = "100%")
               ),
               
               # Right Column for the Iframe Box
               column(
                 width = 7,  # Adjusted width
                 div(
                   class = "iframe-box",
                   uiOutput("webFrame")
                 )
               )
             )
           )
  ),
  
  
  
  
  
  # Page 3: Time Series Analysis
  tabPanel(
    "Arten & Zeitanalyse",
    fluidPage(
      titlePanel("Arten & Zeitanalyse"),
      tags$head(
        tags$style(HTML("
      .centered {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
      }
      .loader {
        border: 5px solid #f3f3f3; 
        border-top: 5px solid #3498db; 
        border-radius: 50%; 
        width: 50px; 
        height: 50px; 
        animation: spin 2s linear infinite;
      }
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      .loader-container {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
      }
      .slider-vertical {
        transform: rotate(270deg);
        transform-origin: 50% 50%;
        margin-left: -20px; 
       
        
          
      }
      .slider-vertical .irs-bar {
        height: 8px;  /* Adjust the height of the slider's bar */
      }
      .slider-vertical .irs-slider {
        height: 800px;  /* Adjust slider's thumb height */
      }
    "))
      ),
      
      # Add the loader at the top of the page
      div(
        id = "loadingMessageTop",
        style = "
      display: none; 
      text-align: center; 
      font-size: 20px; 
      padding: 20px; 
      position: fixed; 
      top: 50%; 
      left: 50%; 
      transform: translate(-50%, -50%); 
      z-index: 999;",
        
        div(style = "display: flex; flex-direction: column; align-items: center;",
            "Spektrogramm lädt...",
            tags$div(class = "loader", style = "margin-top: 15px;")  # Loader below text
        )
      ),
      
      # Create a two-column layout
      fluidRow(
        column(
          width = 6,
          HTML("<div style='height:50px;'></div>"),
          selectInput("speciesSelect", "Art auswählen", choices = unique(data$Artname), selected = "Kohlmeise", multiple = TRUE),
          selectInput("agg_type", "Gruppierung:", choices = c("Monat", "Jahr"), selected = "Monat"),
          plotOutput("monthlyPlot", height = "350px"),
          HTML("<div style='height:30px;'></div>"),
          plotOutput("hourlyPlot", height = "350px")
        ),
        
        column(
          width = 6,
          HTML("<div style='height:55px;'></div>"),
          dataTableOutput("speciesTable"),
          HTML("<div style='height:px;'></div>")
        )
      ),
      
      fluidRow(
        HTML("<div style='height: 50px;'></div>"),
        selectizeInput("species", "Art auswählen", choices = Artenliste$Artname), 
        HTML("<div style='height: 10px;'></div>"), 
        div(class = "centered", htmlOutput("audioPlayer")),
        HTML("<div style='height: 4px;'></div>"),
        
        useShinyjs()
      ),  
      
      fluidRow(
        column(
          width = 2,
          HTML("<div style='height: 0px;'></div>"),# Adjusted the width of the slider column
          noUiSliderInput("freqRange","",min = 0, max = 15, value = c(0,15), step = 1, 
                                    width = "100%",orientation = "vertical",
                          height = "310px",direction = "rtl",color ="#3288bd"),
           # div(
          #  class = "slider-vertical",
           # sliderInput("freqRange", "kHz",  # You can add a label if necessary
            #            min = 0, max = 15, value = c(0, 15), step = 1, 
             #           width = "100%")  # Optional: Makes the slider animation smoother
         # ),
          style = "height: 250px; margin-left: -50px;"  # Adjusted column height to support the slider length
        ),
        
        column(
          width = 10,  # Spectrogram column
          div(
            style = "display: flex; justify-content: center;",  # Center the plot
            plotOutput("spectrogram", height = "350px", width = "100%")  # Adjust the width to 100% of the column
          ),
          style = "margin-left: -30px;",
          
           div(
             style = "display: flex; flex-direction: column; align-items: center; width: 100%;margin-left: 5px;",
          
          
          HTML("<div style='height: 10px;'></div>"),
          
             noUiSliderInput("timeRange", "", 
                         min = 0, max = 60, value = c(0, 60),step = 2, height = "17px",width = "94%",color = "#3288bd"),
            
         
          
           )
        )
      ),
      
      HTML("<div style='height: 10px;'></div>"),
      
      
      fluidRow(
        column(6, actionButton("applyButton", "Übernehmen", 
                               style = "background-color: red; color: white; 
                                  border: none; padding: 10px 20px; font-size: 16px;margin-left: 450px;")),
        column(6, actionButton("resetButton", "Zurücksetzen", 
                               style = "background-color: red; color: white; 
                                  border: none; padding: 10px 20px; font-size: 16px;margin-left: -5px;"))
      ),
    
       fluidRow(
        
      # div(
      #   style = "display: flex; flex-direction: column; align-items: center; width: 100%;margin-left: 25px;",
         
         
         #HTML("<div style='height: 10px;'></div>"),
         
     #    noUiSliderInput("timeRange", "", 
      #               min = 0, max = 60, value = c(0, 60),step = 2, height = "17px",width = "76%",color = "#3288bd"),
       #  sliderInput("freqRange", "Frequenzbereich auswählen (kHz):", 
           #          min = 0, max = 15, value = c(0, 15),step = 1, width = "50%")
         # Add the commit button
         
    #   ),
     
       
       HTML("<div style='height: 30px;'></div>"),
        div(
          style = "padding: 20px; text-align: left; margin-left: 200px;",  # Center text inside the full-width box
          box(
            width = 10,  # Full width of the page
            status = "primary",
            solidHeader = TRUE,
            class = "custom-box",
            style = "padding: 15px; line-height: 1.6;",  # Increased padding and line height
            HTML(paste0(
              "<div>",
              "<h4 style='color: #3288bd; margin-bottom: 10px;'>Haftungsausschluss</h4>",
              "<p style='margin-bottom: 5px;'>Dies sind die ersten Ergebnisse einer laufenden Studie.</p>",
              "<p style='margin-bottom: 5px;'>Die in diesem Projekt klassifizierten Arten können aufgrund von Ungenauigkeiten in den AI-Klassifizierungsmodellen fehlerhaft sein.</p>",
              "<p style='margin-bottom: 5px;'>Das Vorkommen jeder identifizierten Art ist durch die manuelle Überprüfung mindestens einer entsprechenden Tonaufnahme belegt.</p>",
              "<p style='margin-bottom: 5px;'>Dennoch sollten die Ergebnisse mit Vorsicht betrachtet werden, insbesondere für Arten, die selten in unseren Aufzeichnungen gefunden wurden.</p>",
              "<p style='margin-bottom: 5px;'>Es ist sehr unwahrscheinlich, dass Arten, von denen nur vereinzelt Gesänge und Rufe gefunden wurden, die Flächen dauerhaft als Lebensraum und zur Fortpflanzung nutzen.</p>",
              "<p style='margin-bottom: 5px;'>Andererseits sind auch zeitweilig genutzte Rast- oder Nahrungshabitate im Lebenszyklus vieler Arten wichtig und insbesondere für Zugvögel unverzichtbar.</p>",
              "<p>Weitere Erhebungen werden die Liste der Arten, die die Flächen regelmäßig nutzen, erweitern und ihre Zuverlässigkeit verbessern.</p>",
              "</div>"
            ))
          )
        )
       )
    )
  ),
  
  
  
  
  # Page 4: Downloads
  tabPanel("Downloads",
           fluidPage(
             tags$head(
               tags$style(HTML("
               .download-box {
                 background-color: #f8f9fa; 
                 border: 1px solid #3288bd; 
                 border-radius: 10px; 
                 padding: 20px; 
                 margin-bottom: 20px; 
                 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
               }
               .download-box h4 {
                 color: #3288bd; 
                 margin-bottom: 15px; 
                 text-align: center;
               }
               .download-button {
                 width: 100%; /* Full-width buttons */
                 margin-bottom: 10px; /* Spacing between buttons */
               }
               .download-button_2 {
                 width: 30%; /* Full-width buttons */
                 margin-bottom: 10px; /* Spacing between buttons */
               }
               .main-panel p {
                 margin-bottom: 20px; /* Space below paragraphs */
               }
               .download-list {
                 list-style-type: none; /* Remove bullets */
                 padding-left: 0; /* Remove padding */
               }
               .download-list li {
                 margin-bottom: 10px; /* Space between list items */
               }
             "))
             ),
             
             titlePanel("Daten herunterladen"),
             HTML("<div style='height:40px;'></div>"),
             
             sidebarLayout(
               sidebarPanel(
                 h4("Download-Optionen"),
                 #         tags$a(
                 #          href = "https://drive.google.com/file/d/1Bz1Wq30uX2ARRduz0OxOpVaw03ZmldG2/view?usp=sharing",  # Replace with your URL
                 #         target = "_blank",                  # Opens the link in a new tab
                 #        actionButton("linkButton", "Bericht herunterladen", class = "download-button")  # Button style
                 #    ),
                 downloadButton("downloadreport","Bericht herunterladen", class = "download-button"),
                 downloadButton("downloadRData", "Rohdaten herunterladen", class = "download-button"),
                 downloadButton("downloadData", "Artenliste herunterladen", class = "download-button"),
                 downloadButton("downloadaudio", "Audio Proben herunterladen", class = "download-button"),
                 

                 br(),
                 p("Wählen Sie einen Datensatz zum Herunterladen aus.", style = "text-align: center;"),
                 
                 
                 
               ),
               mainPanel(
                 div(class = "download-box",
                     h4("Verfügbare Downloads"),
                     p("Sie können die folgenden Datensätze herunterladen:"),
                     tags$ul(class = "download-list",
                             tags$li(tags$strong("Bericht:"), "Statischer Bericht der Ergebnisse."),
                             tags$li(tags$strong("Rohdaten:"), "Enthält alle aufgezeichneten Daten."),
                             tags$li(tags$strong("Artenliste:"), "Enthält eine Liste aller Arten und der Gesamtdetektionen."),
                             tags$li(tags$strong("Audio Proben:"), "Audio-Proben für besonders schützenswerte Arten.")
                             
                     )
                 ),
                 HTML("<div style='height:30px;'></div>"),  # Spacer
                 
                 div(style = "text-align: center;",  # Center the image horizontally
                     tags$img(
                       src = "UFR-vorlage-designsystem-typo-farben-V1.92.png", 
                       height = "150px", 
                       style = "margin-top: -10px;"  # You can remove margin-left and margin-right for centering
                     )
                 ),
                 HTML("<div style='height:10px;'></div>"),  # Spacer
                 tags$head(
                   tags$style(HTML("
      .icon-container {
        display: flex; /* Use flexbox to align items in a row */
        align-items: center; /* Center align items vertically */
        margin-bottom: 10px; /* Space between each contact method */
      }
      .icon-container img {
        height: auto; /* Maintain aspect ratio */
        margin-right: 10px; /* Space between icon and text */
      }
      .contact-box {
        margin-top: 20px; /* Space above the contact box */
      }
    "))
                 ),
                 
                 
                 # New contact box
                 div(class = "contact-box",
                     h4("Kontakt"),
                     p("Für Anfragen können Sie uns unter folgendem Kontakt erreichen:"),
                     div(class = "icon-container",
                         style = "display: flex; align-items: center;",  # Flexbox for vertical alignment
                         tags$a(
                           href = "mailto:sandra.mueller@biologie.uni-freiburg.de",  # Mailto link
                           tags$img(
                             src = "mail-142.svg",  # First email icon
                             alt = "Email",
                             style = "width: 75px;"  # Set size inline
                           ),
                           style = "text-decoration: none; color: #3288bd;"  # Style for the email link
                         ),
                         tags$span(style = "margin-left: 10px; font-size: 16px;", "Sandra Müller"),  # Text next to the first email icon
                     ),
                     # Add another email icon with text
                     div(class = "icon-container",
                         style = "display: flex; align-items: center; margin-top: 10px;",  # Flexbox for horizontal alignment
                         tags$a(
                           href = "mailto:thomasgarmstrong88@gmail.com",  # Second mailto link
                           tags$img(
                             src = "mail-142.svg",  # Second email icon
                             alt = "Email",
                             style = "width: 75px;"  # Set size inline
                           ),
                           style = "text-decoration: none; color: #3288bd;"  # Style for the email link
                         ),
                         tags$span(style = "margin-left: 10px; font-size: 16px;", "Tom Armstrong")  # Text next to the second email icon
                     ),
                     # LinkedIn and GitHub icons in a row
                     div(class = "icon-container",
                         style = "display: flex; justify-content: center; margin-top: 10px;",  # Center the icons
                         tags$a(
                           href = "https://www.linkedin.com/in/tom-armstrong-8788452b/",  # LinkedIn URL
                           target = "_blank",  # Opens the link in a new tab
                           tags$img(
                             src = "LinkedIn_logo_initials.png",  # LinkedIn logo
                             alt = "LinkedIn",
                             style = "width: 60px;"  # Set size inline
                           )
                         ),
                         tags$a(
                           href = "https://github.com/armsto88/-Oetternbach_Detmold/tree/main",  # GitHub URL
                           target = "_blank",  # Opens the link in a new tab
                           tags$img(
                             src = "GitHub_Logo.png",  # GitHub logo
                             alt = "GitHub",
                             style = "width: 90px;"  # Set size inline
                           )
                         )
                     )
                 ),
                 
                 
                 
                 
                 
                 
                 HTML("<div style='height:100px;'></div>")  # Spacer
               )))))






server <- function(input, output, session) {
  
  
  
  # Summary Statistics
  output$totalRecords <- renderValueBox({
    valueBox(length(data$Common.name),"Erfasst",icon("database"))
  })
  
  output$uniqueSpecies <- renderValueBox({
    valueBox(length(unique(data$Artname)), "Artnamen", icon = icon("feather"))
  })
  
  species_of_concern<-data %>%
    filter(Conservation.status %in% c("Endangered", "Heavily Endangered", "Warning")) %>%
    summarise(total_unique_species = n_distinct(Common.name))
  
  output$Speciesofconcern <- renderValueBox({
    valueBox(species_of_concern$total_unique_species, "Besonders schützenswerte Arten", icon = icon("exclamation-triangle"))
  })

  SITE_data<- data %>%
    group_by(site_name) %>%
    mutate(unique = n_distinct(Common.name)) %>%  # Count unique species per site
    mutate(Concern = n_distinct(Common.name[Conservation.status %in% c("Endangered", "Heavily Endangered", "Warning")])) %>%  # Count unique species of concern
    select(site_name, LAT, LNG, unique, Concern) %>%
    distinct() 
  
  # Leaflet Map
  output$map <- renderLeaflet({
    req(SITE_data)  # Ensure data is available before rendering the map
    
    
    map <- leaflet(SITE_data) %>%
      addProviderTiles(providers$Esri.WorldImagery, group = "Satellite") %>%
      addProviderTiles(providers$OpenStreetMap, group = "OpenStreetMap")  %>%  # Adds satellite basemap
      fitBounds(lng1 = 8.8396187446, lat1 = 51.9552986308, 
                lng2 = 8.8647194143, lat2 = 51.9664450509) %>%
      addMiniMap(
        toggleDisplay = T,             # Keeps minimap always visible
        minimized = F,                 # Shows minimap by default
        tiles = providers$OpenStreetMap,   # Tiles used for inset
        width = 100,                       # Width of minimap
        height = 100,                      # Height of minimap
        zoomLevelOffset = -4          # Zoom level for minimap
      )%>%
      addLayersControl(baseGroups = c("Satellite", "OpenStreetMap"),
                       options = layersControlOptions(collapsed = FALSE)  # Options to keep the control expanded
      )%>%
      
      addMarkers(lat = ~LAT,lng = ~LNG, popup = ~paste("<b>Standortname:</b>", site_name, "<br><b>Einzigartige Arten:</b>", unique,"<br><b>Besorgniserregende Arten:</b>",Concern ))
    
  })
  
  library(lubridate)
  library(dplyr)
  library(ggplot2)
  
  output$plot1 <- renderPlot({
    grouping <- input$grouping
    
    # Ensure corr_datetime is parsed correctly (adjust the format as needed)
    #data <- data %>%
    
    # mutate(corr_datetime = dmy(my))  # Adjust to your datetime format
    
    # Define fixed start and end dates
    start_date <- as.Date("2021-03-01")
    end_date <- as.Date("2022-09-01")
    
    # Prepare the plot data based on grouping
    if (grouping == "month") {
      plot_data_summary <- data %>%
        mutate(my = floor_date(my, "month")) %>%  # Create month variable
        group_by(my) %>%
        summarise(Detections = n(), .groups = "drop")  # Count detections
      x_var <- plot_data_summary$my  # Use 'my' for x variable
    } else if (grouping == "hour") {
      plot_data_summary <- data %>%
        # mutate(hour_corr) %>%  # Extract hour
        group_by(hour_corr) %>%
        summarise(Detections = n(), .groups = "drop")  # Count detections
      x_var <- plot_data_summary$hour_corr  # Use 'hour_corr' for x variable
    }
    
    # Create the plot
    p <- ggplot(plot_data_summary, aes(x = x_var, y = Detections)) +
      geom_point(size = 3, color = "#fdae61") +
      geom_line(color = "#66c2a5", linewidth = 1) +
      theme_minimal() +
      labs(x ="Monat/Jahr", y = "Anzahl an Artenerfassungen") +
      theme_few() +
      theme(legend.title = element_blank())+
      theme_few()+
      theme(plot.margin = margin(1, 1, 1, 1, unit = "cm"),
            axis.text.x = element_text(angle = 45,vjust = .6),
            axis.title.x = element_text(vjust = -2,face = "bold"),
            axis.title.y = element_text(face="bold",vjust = 3),
      )
    
    # Set the x-axis scale based on the grouping
    if (grouping == "month") {
      p <- p + scale_x_date(date_labels = "%b %Y", date_breaks = "1 month", limits = c(start_date, end_date))
    } else if (grouping == "hour") {
      p <- p + scale_x_continuous(breaks = seq(0, 23, 1), limits = c(0, 23))  # Hourly breaks
    }
    if (grouping == "month") {
      p <- p + labs(x = "Monat/Jahr")
    } else if (grouping == "hour") {
      p <- p + labs(x = "Uhr Zeit")  # Hourly breaks
    }
    
    
    p
  })
  
  output$plot2 <- renderPlot({
    plot_data <- coverage %>%
      mutate(
        count = replace_na(count, 0),
        month_year = as.Date(paste0(month_year, "-01")),
        month_year_label = format(month_year, "%b %y"),
        site = recode(site, 
                      "BO_count" = "Balbrede Oetternbach",
                      "BW_count" = "Balbrede Wiese",
                      "OJ_count" = "Jürgens Eiche",
                      "PK_count" = "Peterskamp",
                      "BE_count" = "Balbrede Esche")
      ) %>%
      filter(!is.na(count), month_year != as.Date("1970-01-01")) %>%
      {
        if (input$group_by == "month_year") {
          group_by(., month_year, month_year_label)
        } else if (input$group_by == "site_month_year") {
          group_by(., site, month_year, month_year_label)
        } else {
          .
        }
      } %>%
      summarise(count = sum(count) / 60, .groups = 'drop')
    
    # Set up ggplot with conditional fill mapping
    p <- ggplot(plot_data, aes(
      x = month_year,
      y = count,
      fill = if (input$group_by == "site_month_year") as.factor(site) else "#66c2a5"
    )) +
      geom_col(position = "dodge",alpha = if (input$group_by =="site_month_year").5 else .8 ,width = if (input$group_by == "site_month_year") 70 else 35) +
      scale_x_date(date_labels = "%b %y", breaks = "1 month") +
      labs(
        x = "Monat/Jahr",
        y = "Aufnahmedauer (in Stunden)"
      ) +
      theme_few() +
      theme(
        legend.title = element_blank(),
        legend.position = "bottom",
        legend.text = element_text(size = 10),   # Change legend text size
        plot.margin = margin(1, 1, 1, 1, unit = "cm"),
        axis.text.x = element_text(angle = 45, vjust = .6),
        axis.title.x = element_text(vjust = -2, face = "bold"),
        axis.title.y = element_text(face = "bold", vjust = 3)
      )
    
    # Apply scale_fill only when needed
    if (input$group_by == "site_month_year") {
      p <- p + scale_fill_brewer(palette = "Set1")
    } else {
      p <- p + scale_fill_identity()  # Ensures the color "#66c2a5" is used as-is
    }
    
    # Print the plot
    p
    
  })
  
  
  
  # Add a button column to the data
  result <- data %>%
    filter(Conservation.status %in% c("Endangered", "Heavily Endangered", "Warning")) %>%
    group_by(Artname, erhaltungsstatus) %>%
    summarise(Erfassung = length(Artname)) %>%
    rename(
      Erhaltungsstatus = erhaltungsstatus
    ) %>%
    mutate(URL = case_when(
      Artname == "Grauschnäpper" ~ "https://www.nabu.de/tiere-und-pflanzen/voegel/portraets/grauschnaepper/",
      Artname == "Feldlerche" ~ "https://www.nabu.de/tiere-und-pflanzen/voegel/portraets/feldlerche/",
      Artname == "Kiebitz" ~ "https://www.nabu.de/tiere-und-pflanzen/voegel/portraets/kiebitz/",
      Artname == "Bluthänfling" ~ "https://www.nabu.de/tiere-und-pflanzen/voegel/portraets/bluthaenfling/",
      Artname == "Star" ~ "https://www.nabu.de/tiere-und-pflanzen/voegel/portraets/star/",
      Artname == "Rotmilan" ~ "https://www.nabu.de/tiere-und-pflanzen/voegel/portraets/rotmilan/",
      Artname == "Rauchschwalbe" ~ "https://www.nabu.de/tiere-und-pflanzen/voegel/portraets/rauchschwalbe/",
      Artname == "Wachtel" ~ "https://www.nabu.de/tiere-und-pflanzen/voegel/portraets/wachtel/",
      Artname == "Feldsperling" ~ "https://www.nabu.de/tiere-und-pflanzen/voegel/portraets/feldsperling/"
    )) %>%
    mutate(Info. = paste0("<button class='btn btn-info btn-sm' onclick=\"Shiny.setInputValue('selected_url', '", URL, "', {priority: 'event'})\">Offen</Info.>")) %>%
    mutate(Erhaltungsstatus = factor(Erhaltungsstatus, levels = c("Stark gefährdet", "gefährdet", "Vorwarnliste"))) %>%
    arrange(Erhaltungsstatus)
  
  ############## TABLE ############################
  
  output$birdTable <- renderDT({
    datatable(result %>% select(Artname, Erhaltungsstatus, Erfassung, Info.),  # Exclude the raw URL column from display
              escape = FALSE,  # Allow HTML for buttons
              rownames = FALSE,
              selection = "none",  # Disable row selection
              options = list(
                pageLength = 16,
                dom = 'tip',
                columnDefs = list(list(
                  className = 'dt-center',
                  targets = "_all"
                ))
              ))
  })
  
  # Observe button clicks to update the iframe
  observeEvent(input$selected_url, {
    output$webFrame <- renderUI({
      tags$iframe(
        src = input$selected_url,
        width = "100%",
        height = "500px",
        style = "border:none;"
      )
    })
  })
  
 
  
  
  
  # Monthly Plot
  # Reactive expression to aggregate data based on selection
  aggregated_data <- reactive({
    if (input$agg_type == "Monat") {
      data %>%
        filter(Artname %in% input$speciesSelect) %>%
        group_by(my, Artname) %>%
        summarise(Total.detections = n(), .groups = "drop")
    } else {
      data %>%
        filter(Artname %in% input$speciesSelect) %>%
        group_by(Year, Artname) %>%
        summarise(Total.detections = n(), .groups = "drop")
    }
  })
  
  start_date <- as.Date("2021-03-01")  # Change this to your desired start date
  end_date <- as.Date("2022-10-01")
  
  
  
  output$monthlyPlot <- renderPlot({
    req(input$speciesSelect)
    
    p <- ggplot(aggregated_data(), aes(x = if (input$agg_type == "Monat") my else Year, 
                                       y = Total.detections, 
                                       colour = Artname)) +
      geom_line() +
      geom_point(size = 3) +
      theme_few() +
      theme(
        legend.position = "bottom",
        axis.text.x = element_text(angle = 45, hjust = 1, face = "bold"),
        axis.text.y = element_text(face = "bold"),
        axis.title.x = element_text(vjust = -2),
        axis.title.y = element_text(vjust = 3)
      ) +
      labs(title = "Monatliche / Jährliche Erfassung", x = "Zeit", y = "Erfassung", colour = "Artnamen") +
      scale_colour_brewer(palette = "Set2")
    
    # Apply scale_x_date only if "Month" is selected
    if (input$agg_type == "Monat") {
      p <- p + scale_x_date(date_labels = "%b %Y", date_breaks = "1 month", limits = c(start_date, end_date))
    } else {
      p <- p + scale_x_continuous(breaks = seq(min(aggregated_data()$Year), max(aggregated_data()$Year), 1))
    }
    
    p
  })
  
  # Hourly Plot
  output$hourlyPlot <- renderPlot({
    req(input$speciesSelect)
    filtered_data <- data %>%
      filter(Artname %in% input$speciesSelect) %>%
      group_by(hour_corr,Artname) %>%
      summarise(Total.detections = n(), .groups = "drop")
    
    ggplot(filtered_data, aes(x = hour_corr, y = Total.detections, colour = Artname)) +
      geom_line() +
      geom_point(size = 3) +
      theme_few() +
      theme(legend.position = "bottom",
            axis.text.x = element_text(hjust = 1,face = "bold"),
            axis.text.y = element_text(face = "bold"),
            axis.title.x = element_text(vjust = -2),
            axis.title.y = element_text(vjust = 3)) +
      labs(title = "Stündliche Erfassung ", x = "Uhr Zeit", y = "Erfassung",colour = "Artnamen") +
      scale_x_continuous(limits = c(0,23))+
      scale_colour_brewer(palette = "Set2") 
  })
  
  
 
  output$speciesTable <- renderDT({
    datatable(Artenliste[, c("Artname", "Wissenschaftlicher.Name", "Erfassung")],  # Removed Button column
              escape = FALSE, 
              rownames = F,
              options = list(
                pageLength = 20,
                columnDefs = list(list(
                  className = 'dt-center', 
                  targets = "_all"  # Centers all columns
                ))
              ))
  })
  
  # Reactive to get the selected species' folder and wav file path
  selected_wav_path <- reactive({
    species_name <- input$species
    folder_path <- file.path("www","Arten_samples", "Arten zur Überprüfung", species_name)
    wav_files <- list.files(folder_path, pattern = "\\.WAV$", full.names = TRUE)
    
    if (length(wav_files) > 0) {
      return(wav_files[1])  # Return the first .WAV file found
    } else {
      return(NULL)
    }
  })

# Initial reactive values for sliders
default_time <- c(0, 60)  # Default time range
default_freq <- c(0, 15)  # Default frequency range

# Store slider values and update them only on button click
sliderValues <- reactiveValues(
  time = default_time,
  freq = default_freq
)

# Update slider values when the button is clicked
observeEvent(input$applyButton, {
  sliderValues$time <- input$timeRange
  sliderValues$freq <- input$freqRange
})

  
# Observe when a new species is selected and reset sliders
observeEvent(input$species, {
  # Reset sliders to default values when species changes
  sliderValues$time <- default_time
  sliderValues$freq <- default_freq
  updateSliderInput(session, "timeRange", value = default_time)
  updateSliderInput(session, "freqRange", value = default_freq)
})

observeEvent(input$resetButton, {
  sliderValues$time <- default_time
  sliderValues$freq <- default_freq
  updateSliderInput(session, "timeRange", value = default_time)
  updateSliderInput(session, "freqRange", value = default_freq)
})
  # Render the spectrogram when a species is selected
  
  
  debounced_time <- debounce(reactive({ input$timeRange }), 300)
  debounced_freq <- debounce(reactive({ input$freqRange }), 300)
  
  output$spectrogram <- renderPlot({
    shinyjs::show("loadingMessageTop")
    #shinyjs::show("spectrogramLoader")
    Sys.sleep(3) 
    wav_file <- selected_wav_path()
    
    
    if (!is.null(wav_file)) {
      audio_data <- (readWave(wav_file))
     
      
      # Set the margins before plotting
      par(mar = c(3, 3, 2, 2))  # Adjust the margins (bottom, left, top, right)
      
      freq_Range <- sliderValues$freq
      time_Range <- sliderValues$time
      
   
      
      
      spectro(audio_data,
              palette = topo.colors,
              collevels = seq(-50, 0, 5),
              #ovlp = 75,
              scale = F,
              tlab = "",
              flab = "",
              #norm = T,
              grid = F,
              #fastdisp = T,
              wl = 100,
              flim = freq_Range,
              tlim = time_Range,
              colbg = "black",
              colaxis = "white",
              main = paste("Spectrogram of", input$species))
    } else {
      plot(1, type = "n", xlab = "", ylab = "", main = "No WAV file found or selected species")
    }
    shinyjs::hide("loadingMessageTop")
    
  })
  
  
  output$audioPlayer <- renderUI({
    wav_file <- selected_wav_path()
    
    if (!is.null(wav_file)) {
      # Read the audio file
      audio_data <- tryCatch({
        readWave(wav_file)
      }, error = function(e) {
        message("Error reading WAV file: ", e$message)
        return(NULL)
      })
      
      if (is.null(audio_data)) {
        return("Error loading audio file.")
      }
      
      # Retrieve the time range from slider
      time_Range <- sliderValues$time
      start_sample <- max(1, floor(time_Range[1] * audio_data@samp.rate))
      end_sample <- min(floor(time_Range[2] * audio_data@samp.rate), length(audio_data@left))
      
      if (start_sample <= end_sample) {
        # Extract the segment
        audio_segment <- audio_data[start_sample:end_sample]
        
        # Check if audio segment is valid
        if (length(audio_segment@left) == 0) {
          return("Invalid audio segment.")
        }
        
        # Define the full path for the temporary file in the 'www' folder
        temp_file <- file.path("www", "temp_audio.wav")
        
        # Clear the old temporary file if it exists
        if (file.exists(temp_file)) {
          unlink(temp_file)  # Remove the old temp file
        }
        
        # Save the segment to the 'www' directory
        tryCatch({
          writeWave(audio_segment, temp_file)
        }, error = function(e) {
          message("Error writing audio file: ", e$message)
          return("Error writing audio file.")
        })
        
        # Output the audio player with unique query parameter to force refresh
        return(tags$audio(src = paste0("temp_audio.wav?v=", Sys.time()), controls = TRUE))
      } else {
        return("Invalid time range selected.")
      }
    } else {
      return("No audio available.")
    }
  })
  
  
  
  
  output$downloadreport <- downloadHandler(
    filename = function() {
      paste("Bericht", "_", Sys.Date(), "_", ".pdf", sep = "")
    },
    content = function(file) {
      # Copy the report from the 'www' directory to the download location
      file.copy("www/Bericht.pdf", file)
    }
  )
  
  
  
  output$downloadData <- downloadHandler(
    filename = function() { 
      paste("Artenliste","_", Sys.Date(),"_", ".csv", sep = "") 
    },
    content = function(file) {
      write.csv(Artenliste, file, row.names = FALSE)
    }
  )
  
  output$downloadRData <- downloadHandler(
    filename = function() { 
      paste("Rohdaten","_",Sys.Date(),"_", ".csv", sep = "") 
    },
    content = function(file) {
      write.csv(data, file = file)
    }
    
  )
  output$downloadaudio <- downloadHandler(
    filename = function() { 
      paste("Audio_Proben","_", Sys.Date(),"_", ".zip", sep = "") 
    },
    content = function(file) {
      # Copy the report from the 'www' directory to the download location
      file.copy("www/Arten_samples.zip", file)
    }
  )
  
}

shinyApp(ui, server)
